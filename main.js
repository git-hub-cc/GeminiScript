javascript:(function main() {    /* --- 防止重复加载 --- */    if (document.getElementById('gemini-mvp-helper')) return;    /* --- 状态管理 (单一数据源) --- */    let prompts = [
    "输出文档",
    "给出技术方案，本次不输出代码",
    "进行分类",
    "要求内容完整",
    "要求商业级别",
    "给出完整代码",
    "因为内容过多，分多次输出，每次1000行内容，同一个文件放在同一次回复，首次说明分几次",
    "从aa,bb的角度进行入手，还可以从什么维度进行入手，要求更多的维度"
];    let originalContent = '';    /* --- 新增：使用一个数组追踪所有元素的顺序，'main_content'是特殊标记 --- */    let itemOrder = [];    const geminiTextarea = document.querySelector('ms-autosize-textarea textarea');    /* --- 安全地设置 HTML (Trusted Types) --- */    let policy;    try {        if (window.trustedTypes && window.trustedTypes.createPolicy) {            policy = window.trustedTypes.createPolicy('gemini-prompt-helper-policy-v8', { createHTML: (string) => string });        }    } catch (e) { console.error('TrustedTypes policy creation failed', e); }    const setSafeHTML = (element, html) => {        if (policy) {            element.innerHTML = policy.createHTML(html);        } else {            element.innerHTML = html;        }    };    /* --- 样式定义 (支持深色/浅色模式，更新对齐) --- */    const styles = `    /* --- 变量定义 --- */    #gemini-mvp-helper {        --bg-primary: #1e1e1e; --bg-secondary: #2a2a2a; --bg-header: #333; --bg-input: #333;        --bg-dragging: #555; --text-primary: #f0f0f0; --text-title: #bb86fc; --text-button: #121212;        --text-handle: #888; --border-primary: #444; --border-input: #555; --accent-primary: #bb86fc;        --accent-secondary: #03dac6; --accent-delete: #ff5555; --accent-delete-hover: #ff8888;        --shadow-color: rgba(0,0,0,0.5); --original-content-bg: #2c2c2c; --original-content-border: var(--accent-primary);    }    @media (prefers-color-scheme: light) {        #gemini-mvp-helper {            --bg-primary: #ffffff; --bg-secondary: #f1f3f4; --bg-header: #e8eaed; --bg-input: #ffffff;            --bg-dragging: #d0e3ff; --text-primary: #202124; --text-title: #1967d2; --text-button: #ffffff;            --text-handle: #5f6368; --border-primary: #dadce0; --border-input: #a0a0a0; --accent-primary: #1a73e8;            --accent-secondary: #4285f4; --accent-delete: #d93025; --accent-delete-hover: #e57373;            --shadow-color: rgba(0,0,0,0.2); --original-content-bg: #e8f0fe; --original-content-border: var(--accent-primary);        }    }    /* --- 通用样式 --- */    #gemini-mvp-helper {        position: fixed; bottom: 20px; right: 20px; width: 350px; background: var(--bg-primary); border: 1px solid var(--border-primary);        border-radius: 8px; box-shadow: 0 4px 15px var(--shadow-color); z-index: 9999; color: var(--text-primary);        font-family: sans-serif; display: flex; flex-direction: column; overflow: hidden;    }    #gph-mvp-header { padding: 10px 15px; background: var(--bg-header); cursor: move; user-select: none; }    #gph-mvp-title { margin: 0; font-size: 16px; color: var(--text-title); }    #gph-mvp-body { padding: 15px; max-height: 40vh; overflow-y: auto; }    #gph-mvp-list { list-style: none; padding: 0; margin: 0; display: flex; flex-direction: column; gap: 8px; }    .gph-mvp-item, .gph-original-content-item {        display: flex; align-items: flex-start; /* --- 修改: 顶部对齐 --- */        background: var(--bg-secondary); padding: 8px; border-radius: 4px; border: 1px solid var(--border-primary);    }    .gph-mvp-item.dragging { opacity: 0.7; background: var(--bg-dragging); }    .gph-original-content-item {        background-color: var(--original-content-bg); border: 1px dashed var(--original-content-border);        flex-direction: column; /* --- 原始内容块内部垂直排列 --- */    }    .gph-original-content-item strong { font-style: normal; }    #gph-original-content-text { font-style: italic; word-wrap: break-word; margin-top: 5px; width: 100%;}    .gph-drag-handle { cursor: grab; margin-right: 10px; color: var(--text-handle); user-select: none; padding-top: 2px; }    .gph-mvp-item input[type="checkbox"] { margin-right: 10px; margin-top: 4px; /* --- 微调 --- */ flex-shrink: 0; }    .gph-mvp-item-text { flex-grow: 1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; padding-top: 2px; }    .gph-delete-btn { background: none; border: none; color: var(--accent-delete); cursor: pointer; font-size: 18px; padding: 0 5px; flex-shrink: 0; }    .gph-delete-btn:hover { color: var(--accent-delete-hover); }    #gph-mvp-add-area { padding: 15px; border-top: 1px solid var(--border-primary); background: var(--bg-secondary); display: flex; gap: 10px; }    #gph-new-prompt-input { flex-grow: 1; background: var(--bg-input); border: 1px solid var(--border-input); color: var(--text-primary); border-radius: 4px; padding: 8px; }    #gph-mvp-actions { padding: 15px; border-top: 1px solid var(--border-primary); display: flex; justify-content: space-between; gap: 10px; }    .gph-action-btn { background: var(--accent-primary); color: var(--text-button); border: none; border-radius: 4px; padding: 8px 12px; cursor: pointer; font-weight: bold; flex-grow: 1; }    .gph-action-btn:hover { opacity: 0.85; }    .gph-secondary-btn { background: var(--accent-secondary); }    `;    /* --- HTML 结构 --- */    const panelHTML = `        <div id="gph-mvp-header">            <h3 id="gph-mvp-title">快捷提示词 (可拖动)</h3>        </div>        <div id="gph-mvp-body">            <ul id="gph-mvp-list"></ul>        </div>        <div id="gph-mvp-add-area">            <input type="text" id="gph-new-prompt-input" placeholder="在此添加新提示词...">            <button id="gph-add-prompt-btn" class="gph-action-btn">+</button>        </div>        <div id="gph-mvp-actions">             <button id="gph-select-all-btn" class="gph-action-btn gph-secondary-btn">全选/反选</button>             <button id="gph-copy-btn" class="gph-action-btn">复制代码</button>        </div>    `;    /* --- 检查并注入 --- */    if (!geminiTextarea) {        alert('错误：未找到 Gemini 输入框。脚本无法运行。');        return;    }    const styleSheet = document.createElement("style");    styleSheet.innerText = styles;    document.head.appendChild(styleSheet);    const panel = document.createElement('div');    panel.id = 'gemini-mvp-helper';    setSafeHTML(panel, panelHTML);    document.body.appendChild(panel);    const promptList = document.getElementById('gph-mvp-list');    const newPromptInput = document.getElementById('gph-new-prompt-input');    /* --- 核心功能: 更新 Gemini 输入框 --- */    const updateGeminiTextarea = () => {        const checkedIds = new Set(            Array.from(document.querySelectorAll('#gph-mvp-list input[type="checkbox"]:checked'))                .map(cb => cb.closest('li').dataset.id)        );        const mainContentIndex = itemOrder.indexOf('main_content');        const promptsBefore = [];        const promptsAfter = [];        itemOrder.forEach((id, index) => {            if (id.startsWith('prompt_') && checkedIds.has(id)) {                const promptIndex = parseInt(id.split('_')[1], 10);                if (index < mainContentIndex) {                    promptsBefore.push(prompts[promptIndex]);                } else {                    promptsAfter.push(prompts[promptIndex]);                }            }        });        const parts = [];        if (promptsBefore.length > 0) parts.push(promptsBefore.join('\n\n'));        if (originalContent.trim() !== '') parts.push(originalContent);        if (promptsAfter.length > 0) parts.push(promptsAfter.join('\n\n'));        geminiTextarea.value = parts.join('\n\n');        geminiTextarea.dispatchEvent(new Event('input', { bubbles: true, cancelable: true }));    };    /* --- 核心功能: 渲染提示词列表 (基于 itemOrder) --- */    const renderPrompts = (preserveChecks = false) => {        let checkedIds = new Set();        if (preserveChecks) {            document.querySelectorAll('#gph-mvp-list input[type="checkbox"]:checked').forEach(cb => {                checkedIds.add(cb.closest('li').dataset.id);            });        }        while (promptList.firstChild) {            promptList.removeChild(promptList.firstChild);        }        itemOrder.forEach(id => {            const li = document.createElement('li');            li.dataset.id = id;            if (id === 'main_content') {                li.className = 'gph-original-content-item';                li.setAttribute('draggable', 'false'); /* --- 主要内容块不可拖动 --- */                const contentHTML = `                    <strong>当前主要内容 (在输入框中编辑)</strong>                    <div id="gph-original-content-text">${originalContent.trim() === '' ? '...' : originalContent}</div>                `;                setSafeHTML(li, contentHTML);            } else {                const index = parseInt(id.split('_')[1], 10);                const promptText = prompts[index];                li.className = 'gph-mvp-item';                li.setAttribute('draggable', 'true');                const itemHTML = `                    <span class="gph-drag-handle">::</span>                    <input type="checkbox" ${checkedIds.has(id) ? 'checked' : ''}>                    <span class="gph-mvp-item-text" title="${promptText}">${promptText}</span>                    <button class="gph-delete-btn">&times;</button>                `;                setSafeHTML(li, itemHTML);            }            promptList.appendChild(li);        });    };    /* --- 功能: 添加新提示词 --- */    const addNewPrompt = () => {        const text = newPromptInput.value.trim();        if (text) {            const newIndex = prompts.push(text) - 1;            itemOrder.push(`prompt_${newIndex}`);            newPromptInput.value = '';            renderPrompts(true); /* --- 重新渲染，保持勾选状态 --- */        }    };    /* --- 功能: 删除提示词 (重构以适应新结构) --- */    const deletePrompt = (idToDelete) => {        /* --- 1. 从 itemOrder 中移除 --- */        itemOrder = itemOrder.filter(id => id !== idToDelete);        /* --- 2. 创建新的 prompts 数组和 itemOrder 映射 --- */        const newPrompts = [];        const newOrder = [];        const oldIdToNewId = {};        itemOrder.forEach(id => {            if (id === 'main_content') {                newOrder.push('main_content');            } else {                const oldIndex = parseInt(id.split('_')[1], 10);                const newIndex = newPrompts.push(prompts[oldIndex]) - 1;                const newId = `prompt_${newIndex}`;                newOrder.push(newId);                oldIdToNewId[id] = newId;            }        });        /* --- 3. 更新全局状态 --- */        prompts = newPrompts;        itemOrder = newOrder;        renderPrompts(true); /* --- 重新渲染，保持勾选状态 --- */        updateGeminiTextarea(); /* --- 更新输入框 --- */    };    /* --- 功能: 全选/反选 --- */    const toggleSelectAll = () => {        const checkboxes = document.querySelectorAll('#gph-mvp-list input[type="checkbox"]');        if (checkboxes.length === 0) return;        const allChecked = Array.from(checkboxes).every(cb => cb.checked);        checkboxes.forEach(cb => cb.checked = !allChecked);        updateGeminiTextarea();    };    /* --- 功能: 复制代码到剪贴板 --- */    const copyBookmarkletCode = () => {        const promptsString = JSON.stringify(prompts, null, 4);        const scriptSource = main.toString();        const updatedSource = scriptSource.replace(            /let prompts = \[[\s\S]*?\];/,            `let prompts = ${promptsString};`        );        const bookmarkletCode = `javascript:(${updatedSource})()`;        navigator.clipboard.writeText(bookmarkletCode).then(() => {            alert('新版书签代码已复制到剪贴板！');        }).catch(err => {            console.error('无法复制到剪贴板:', err);            alert('复制失败。');        });    };    /* --- 事件监听器: 面板拖动 --- */    const header = document.getElementById('gph-mvp-header');    let isDraggingPanel = false, offsetX, offsetY;    header.addEventListener('mousedown', (e) => {        isDraggingPanel = true;        offsetX = e.clientX - panel.offsetLeft;        offsetY = e.clientY - panel.offsetTop;        panel.style.userSelect = 'none';    });    document.addEventListener('mousemove', (e) => {        if (!isDraggingPanel) return;        panel.style.left = `${e.clientX - offsetX}px`;        panel.style.top = `${e.clientY - offsetY}px`;    });    document.addEventListener('mouseup', () => {        isDraggingPanel = false;        panel.style.userSelect = 'auto';    });    /* --- 事件监听器: 提示词拖拽排序 --- */    let draggedItem = null;    promptList.addEventListener('dragstart', (e) => {        const item = e.target.closest('li[draggable="true"]'); /* --- 确保不拖动主内容 --- */        if (item) {            draggedItem = item;            setTimeout(() => item.classList.add('dragging'), 0);        }    });    promptList.addEventListener('dragend', () => {        if (draggedItem) {            draggedItem.classList.remove('dragging');            draggedItem = null;        }    });    promptList.addEventListener('dragover', (e) => {        e.preventDefault();        const targetItem = e.target.closest('li');        if (targetItem && targetItem !== draggedItem) {            const rect = targetItem.getBoundingClientRect();            const after = e.clientY > rect.top + rect.height / 2;            promptList.insertBefore(draggedItem, after ? targetItem.nextSibling : targetItem);        }    });    promptList.addEventListener('drop', (e) => {        e.preventDefault();        if (draggedItem) {            /* --- 从DOM更新itemOrder数组 --- */            itemOrder = Array.from(promptList.querySelectorAll('li')).map(li => li.dataset.id);            renderPrompts(true); /* --- 重新渲染以固化顺序并保持勾选 --- */            updateGeminiTextarea(); /* --- 更新输入框 --- */        }    });    /* --- 事件监听器: 面板内交互 --- */    panel.addEventListener('click', (e) => {        const target = e.target;        if (target.id === 'gph-add-prompt-btn') {            addNewPrompt();        } else if (target.classList.contains('gph-delete-btn')) {            if (confirm('确定要删除这条提示词吗？')) {                deletePrompt(target.closest('li').dataset.id);            }        } else if (target.id === 'gph-select-all-btn') {            toggleSelectAll();        } else if (target.id === 'gph-copy-btn') {            copyBookmarkletCode();        }    });    promptList.addEventListener('change', (e) => {        if (e.target.type === 'checkbox') {            updateGeminiTextarea();        }    });    newPromptInput.addEventListener('keydown', (e) => {        if (e.key === 'Enter') {            e.preventDefault();            addNewPrompt();        }    });    /* --- 事件监听器: 同步Gemini输入框的修改 --- */    geminiTextarea.addEventListener('input', (e) => {        const currentValue = e.target.value;        const checkedPrompts = Array.from(document.querySelectorAll('#gph-mvp-list input[type="checkbox"]:checked'))            .map(cb => {                const id = cb.closest('li').dataset.id;                const index = parseInt(id.split('_')[1], 10);                return prompts[index];            });        /* --- 简单的剥离逻辑：将所有选中的提示词和换行符替换为空 --- */        let tempContent = currentValue;        checkedPrompts.forEach(p => {            /* --- 使用正则表达式全局替换，处理换行符 --- */            const escapedP = p.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');            tempContent = tempContent.replace(new RegExp(escapedP, 'g'), '');        });        /* --- 清理多余的换行符和空格 --- */        originalContent = tempContent.replace(/(\n\n)+/g, '\n\n').trim();        const originalContentTextDiv = document.getElementById('gph-original-content-text');        if (originalContentTextDiv) {            originalContentTextDiv.textContent = originalContent.trim() === '' ? '...' : originalContent;        }    });    /* --- 初始设置 --- */    originalContent = geminiTextarea.value;    /* --- 初始化 itemOrder，默认主要内容在前，其他在后 --- */    itemOrder.push('main_content');    prompts.forEach((_, index) => itemOrder.push(`prompt_${index}`));    renderPrompts();    console.log('✨ Gemini 快捷提示词助手 (v8-sortable) 加载成功！');})()